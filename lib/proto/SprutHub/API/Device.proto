syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.makesimple.SprutHub.API";
option java_outer_classname = "DeviceProto";

package SprutHub.API;

import "google/protobuf/struct.proto";
import "SprutHub/API/Utils.proto";

service DeviceService {
  rpc list(DeviceListRequest) returns (DevicesMessage);
  rpc get(DeviceGetRequest) returns (DeviceMessage);
  rpc delete(DeviceDeleteRequest) returns (DeviceMessage);
  rpc getInfo(DeviceGetInfoRequest) returns (DeviceInfoMessage);
  rpc getMesh(DeviceGetMeshRequest) returns (DeviceMeshMessage);
  rpc getOptions(DeviceGetOptionsRequest) returns (OptionsMessage);
  rpc setOptions(DeviceSetOptionsRequest) returns (EmptyResponse);
  rpc identify(DeviceIdentifyRequest) returns (EmptyResponse);
  rpc reset(DeviceResetRequest) returns (EmptyResponse);
  rpc join(DeviceJoinRequest) returns (EmptyResponse);
  rpc heal(DeviceHealRequest) returns (EmptyResponse);
}

message DeviceListRequest {
  optional string controllerIndex = 1;
  string expand = 2;
}

message DeviceGetRequest {
  optional string controllerIndex = 1;
  optional string id = 2;
  string expand = 3;
}

message DeviceDeleteRequest {
  optional string controllerIndex = 1;
  optional string id = 2;
}

message DeviceGetInfoRequest {
  optional string controllerIndex = 1;
  optional string id = 2;
}

message DeviceInfoMessage {
  optional string controllerIndex = 1;
  optional string id = 2;
  optional string info = 3;
}

message DeviceGetMeshRequest {
  optional string controllerIndex = 1;
  optional string id = 2;
}

message DeviceMeshMessage {
  optional string controllerIndex = 1;
  optional string id = 2; // Уникальный id устройства
  optional string address = 3; // Сетевой адрес, если есть
  optional string type = 4; // Роль устройства в mesh сети (координатор, роутер, конечное устройство)
  repeated string parent = 5; // Место прописки, если предусмотрено протоколом
  repeated string link = 6; // Ассоциации или биндинги
  repeated DeviceNeighborMessage neighbor = 7; // Соседние ноды
  repeated string lastRoute = 8; // Последний успешный маршрут
  repeated string lastRSSI = 9; // Последний RSSI, если больше одного то соотносится с маршрутом
  optional string lastLQI = 10; // Последний LQI, если больше одного то соотносится с маршрутом
  repeated string speed = 11; // Скорость передачи данных, если предусмотрено протоколом
}

message DeviceNeighborMessage {
  optional string id = 1; // Уникальный id устройства
  optional string lqi = 2; // Качество связи с этим соседом, если предусмотрено протоколом
  optional string hop = 3; // Глубина, или количество шагов, если предусмотрено протоколом
}

message DeviceGetOptionsRequest {
  optional string controllerIndex = 1;
  optional string id = 2;
  optional uint32 endpoint = 3;
}

message DeviceSetOptionsRequest {
  optional string controllerIndex = 1;
  optional string id = 2;
  optional uint32 endpoint = 3;
  repeated KeyValueMessage option = 4;
}

message DeviceIdentifyRequest {
  optional string controllerIndex = 1;
  optional string id = 2;
}

message DeviceResetRequest {
  optional string controllerIndex = 1;
  optional string id = 2;
}

message DeviceJoinRequest {
  optional string controllerIndex = 1;
  optional string id = 2;
}

message DeviceHealRequest {
  optional string controllerIndex = 1;
  optional string id = 2;
}

message DeviceMessage {
  optional string id = 1; // Уникальный id устройства
  optional string address = 2; // Сетевой адрес, если есть (NWK)
  optional string name = 3; // Имя устройства
  repeated int32 accessory = 4; // Аксессуары устройства
  optional string firmware = 5; // Прошивка
  optional string manufacturer = 6; // Производитель
  optional string model = 7; // Модель
  optional string init = 8; // Текущий этап спаривания
  optional string state = 9; // Статус устройства (работает, не отвечает)
  optional uint64 lastSeen = 10; // Время последнего сообщения от устройства (unix timestamp)
  optional bool online = 11; // Находится ли устройство в сети
  optional uint32 catalogId = 12; // Номер в каталоге
  optional string host = 13; // Имя хоста, либо ip адрес, если есть
  optional uint32 port = 14; // Порт, если есть
  optional string room = 15; // Комната
  optional string info = 16; // Информация об устройстве в виде html странички без стиля
  optional DeviceMeshMessage mesh = 17; // Топология, если это mesh сеть
  repeated DeviceButton button = 18; // Кнопки, отображаемые в интерфейсе
  repeated KeyValueMessage property = 19; // Любые дополнительные свойства
  repeated OptionMessage option = 20; // Настройки устройства
}

message DevicesMessage {
  repeated DeviceMessage device = 1;
}

message DeviceButton {
  optional DeviceButtonType type = 1;
  optional google.protobuf.Value value = 2;
}

enum DeviceButtonType {
  BUTTON_INFO = 0;
  BUTTON_OPTIONS = 1;
  BUTTON_JOIN = 2;
  BUTTON_REMOVE = 3;
  BUTTON_HEAL = 4;
}
